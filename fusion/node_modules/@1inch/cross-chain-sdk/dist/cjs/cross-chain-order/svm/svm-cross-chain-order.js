"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SvmCrossChainOrder = void 0;
const byte_utils_1 = require("@1inch/byte-utils");
const fusion_sdk_1 = require("@1inch/fusion-sdk");
const ethers_1 = require("ethers");
const anchor_1 = require("@coral-xyz/anchor");
const assert_1 = __importDefault(require("assert"));
const resolver_cancellation_config_js_1 = require("./resolver-cancellation-config.js");
const index_js_1 = require("../../contracts/index.js");
const hasher_js_1 = require("../../domains/auction-details/hasher.js");
const uint256_borsh_serialized_js_1 = require("../../utils/numbers/uint256-borsh-serialized.js");
const uint_as_be_bytes_js_1 = require("../../utils/numbers/uint-as-be-bytes.js");
const index_js_2 = require("../../domains/addresses/index.js");
const chains_js_1 = require("../../chains.js");
const index_js_3 = require("../../domains/hash-lock/index.js");
const index_js_4 = require("../../domains/time-locks/index.js");
const base_order_js_1 = require("../base-order.js");
const index_js_5 = require("../../utils/index.js");
const index_js_6 = require("../../domains/auction-details/index.js");
const source_track_js_1 = require("../source-track.js");
const bytes_js_1 = require("../../utils/bytes.js");
class SvmCrossChainOrder extends base_order_js_1.BaseOrder {
    static TRACK_CODE_MASK = new byte_utils_1.BitMask(32n, 64n);
    static DefaultExtra = {
        orderExpirationDelay: 12n,
        allowMultipleFills: true,
        source: 'sdk',
        resolverCancellationConfig: resolver_cancellation_config_js_1.ResolverCancellationConfig.ALMOST_ZERO // to enable cancellation by resolver
    };
    orderConfig;
    details;
    escrowParams;
    constructor(orderInfo, escrowParams, details, extra) {
        (0, assert_1.default)((0, chains_js_1.isSupportedChain)(escrowParams.srcChainId), `Not supported chain ${escrowParams.srcChainId}`);
        (0, assert_1.default)((0, chains_js_1.isSupportedChain)(escrowParams.dstChainId), `Not supported chain ${escrowParams.dstChainId}`);
        (0, assert_1.default)(escrowParams.srcChainId !== escrowParams.dstChainId, 'Chains must be different');
        super();
        const orderExpirationDelay = extra.orderExpirationDelay ??
            SvmCrossChainOrder.DefaultExtra.orderExpirationDelay;
        (0, index_js_5.assertUInteger)(orderExpirationDelay);
        const deadline = details.auction.startTime +
            details.auction.duration +
            orderExpirationDelay;
        (0, index_js_5.assertUInteger)(deadline, byte_utils_1.UINT_32_MAX);
        (0, index_js_5.assertUInteger)(orderInfo.srcAmount, byte_utils_1.UINT_64_MAX);
        (0, index_js_5.assertUInteger)(orderInfo.minDstAmount, fusion_sdk_1.UINT_256_MAX);
        // todo more asserts
        const source = extra.source ?? SvmCrossChainOrder.DefaultExtra.source;
        const isSaltContainsSource = extra.salt && extra.salt > byte_utils_1.UINT_32_MAX;
        const salt = isSaltContainsSource
            ? extra.salt
            : (0, source_track_js_1.injectTrackCode)(extra.salt ?? (0, fusion_sdk_1.randBigInt)(byte_utils_1.UINT_32_MAX), source, SvmCrossChainOrder.TRACK_CODE_MASK);
        (0, index_js_5.assertUInteger)(salt, byte_utils_1.UINT_64_MAX);
        const resolverCancellationConfig = extra.resolverCancellationConfig ||
            SvmCrossChainOrder.DefaultExtra.resolverCancellationConfig;
        this.details = details;
        this.escrowParams = escrowParams;
        this.orderConfig = {
            ...orderInfo,
            source,
            salt,
            allowMultipleFills: extra.allowMultipleFills ??
                SvmCrossChainOrder.DefaultExtra.allowMultipleFills,
            srcAssetIsNative: extra.srcAssetIsNative || false,
            deadline: Number(deadline),
            resolverCancellationConfig: resolverCancellationConfig,
            orderExpirationDelay
        };
    }
    get auction() {
        return this.details.auction;
    }
    get salt() {
        return this.orderConfig.salt;
    }
    get resolverCancellationConfig() {
        return this.orderConfig.resolverCancellationConfig;
    }
    get hashLock() {
        return this.escrowParams.hashLock;
    }
    get timeLocks() {
        return this.escrowParams.timeLocks;
    }
    get srcSafetyDeposit() {
        return this.escrowParams.srcSafetyDeposit;
    }
    get dstSafetyDeposit() {
        return this.escrowParams.dstSafetyDeposit;
    }
    get dstChainId() {
        return this.escrowParams.dstChainId;
    }
    get maker() {
        return this.orderConfig.maker;
    }
    get makerAsset() {
        return this.orderConfig.srcToken;
    }
    get takerAsset() {
        return this.orderConfig.dstToken;
    }
    get makingAmount() {
        return this.orderConfig.srcAmount;
    }
    get takingAmount() {
        return this.orderConfig.minDstAmount;
    }
    /**
     * Real receiver of funds on dst chain
     */
    get receiver() {
        return this.orderConfig.receiver;
    }
    get deadline() {
        return BigInt(this.orderConfig.deadline);
    }
    get auctionStartTime() {
        return this.details.auction.startTime;
    }
    get auctionEndTime() {
        return this.auctionStartTime + this.details.auction.duration;
    }
    get partialFillAllowed() {
        return this.orderConfig.allowMultipleFills;
    }
    get multipleFillsAllowed() {
        return this.orderConfig.allowMultipleFills;
    }
    get srcAssetIsNative() {
        return this.orderConfig.srcAssetIsNative;
    }
    get source() {
        return this.orderConfig.source;
    }
    static new(orderInfo, escrowParams, details, extra) {
        return new SvmCrossChainOrder({
            ...orderInfo,
            srcToken: orderInfo.srcToken.isNative()
                ? index_js_2.SolanaAddress.WRAPPED_NATIVE
                : orderInfo.srcToken
        }, escrowParams, details, {
            ...extra,
            srcAssetIsNative: orderInfo.srcToken.isNative()
        });
    }
    static fromContractOrder(data, auction) {
        (0, assert_1.default)(auction
            .hashForSolana()
            .equals((0, bytes_js_1.bufferFromHex)(data.dutchAuctionDataHash)), 'wrong auction data');
        const details = { auction };
        const extraDetails = {
            ...data.extra,
            orderExpirationDelay: this.calcExpirationDelay(data.expirationTime, auction.startTime, auction.duration)
        };
        return new SvmCrossChainOrder(data.orderInfo, data.escrowParams, details, extraDetails);
    }
    static fromJSON(data) {
        return new SvmCrossChainOrder({
            srcToken: index_js_2.SolanaAddress.fromString(data.orderInfo.srcToken),
            dstToken: index_js_2.EvmAddress.fromString(data.orderInfo.dstToken),
            srcAmount: BigInt(data.orderInfo.srcAmount),
            minDstAmount: BigInt(data.orderInfo.minDstAmount),
            maker: index_js_2.SolanaAddress.fromString(data.orderInfo.maker),
            receiver: index_js_2.EvmAddress.fromString(data.orderInfo.receiver)
        }, {
            dstChainId: data.escrowParams.dstChainId,
            dstSafetyDeposit: BigInt(data.escrowParams.dstSafetyDeposit),
            hashLock: index_js_3.HashLock.fromString(data.escrowParams.hashLock),
            srcChainId: data.escrowParams.srcChainId,
            srcSafetyDeposit: BigInt(data.escrowParams.srcSafetyDeposit),
            timeLocks: index_js_4.TimeLocks.fromBigInt(BigInt(data.escrowParams.timeLocks))
        }, {
            auction: index_js_6.AuctionDetails.fromJSON({
                ...data.details.auction,
                gasCost: { gasBumpEstimate: '0', gasPriceEstimate: '0' }
            })
        }, {
            allowMultipleFills: data.extra.allowMultipleFills,
            orderExpirationDelay: BigInt(data.extra.orderExpirationDelay),
            salt: BigInt(data.extra.salt),
            resolverCancellationConfig: new resolver_cancellation_config_js_1.ResolverCancellationConfig(BigInt(data.extra.resolverCancellationConfig
                .maxCancellationPremium), data.extra.resolverCancellationConfig.cancellationAuctionDuration),
            source: data.extra.source,
            srcAssetIsNative: data.extra.srcAssetIsNative
        });
    }
    static getOrderHashBuffer(params) {
        const auctionHash = 'auction' in params
            ? (0, hasher_js_1.hashForSolana)(params.auction)
            : params.auctionHash;
        return (0, bytes_js_1.bufferFromHex)((0, ethers_1.keccak256)(Buffer.concat([
            params.hashLock.toBuffer(),
            params.maker.toBuffer(),
            params.makerAsset.toBuffer(),
            (0, uint_as_be_bytes_js_1.uintAsBeBytes)(params.makingAmount, 64),
            (0, uint_as_be_bytes_js_1.uintAsBeBytes)(params.srcSafetyDeposit, 64),
            (0, uint256_borsh_serialized_js_1.uint256BorchSerialized)(params.timeLocks.build()),
            (0, uint_as_be_bytes_js_1.uintAsBeBytes)(params.deadline, 32),
            Buffer.from([Number(params.srcAssetIsNative)]),
            (0, uint256_borsh_serialized_js_1.uint256BorchSerialized)(params.takingAmount),
            auctionHash,
            (0, uint_as_be_bytes_js_1.uintAsBeBytes)(params.resolverCancellationConfig
                .maxCancellationPremium, 64),
            (0, uint_as_be_bytes_js_1.uintAsBeBytes)(BigInt(params.resolverCancellationConfig
                .cancellationAuctionDuration), 32),
            Buffer.from([Number(params.multipleFillsAllowed)]),
            (0, uint_as_be_bytes_js_1.uintAsBeBytes)(params.salt, 64)
        ])));
    }
    toJSON() {
        const auction = this.auction.toJSON();
        return {
            details: {
                // skip gasCost field
                auction: {
                    duration: auction.duration,
                    initialRateBump: auction.initialRateBump,
                    points: auction.points,
                    startTime: auction.startTime
                }
            },
            orderInfo: {
                srcToken: this.orderConfig.srcToken.toString(),
                dstToken: this.orderConfig.dstToken.toString(),
                maker: this.orderConfig.maker.toString(),
                srcAmount: this.orderConfig.srcAmount.toString(),
                minDstAmount: this.orderConfig.minDstAmount.toString(),
                receiver: this.orderConfig.receiver.toString()
            },
            escrowParams: {
                hashLock: this.hashLock.toString(),
                srcChainId: chains_js_1.NetworkEnum.SOLANA,
                dstChainId: this.dstChainId,
                srcSafetyDeposit: this.escrowParams.srcSafetyDeposit.toString(),
                dstSafetyDeposit: this.escrowParams.dstSafetyDeposit.toString(),
                timeLocks: this.timeLocks.build().toString()
            },
            extra: {
                srcAssetIsNative: this.srcAssetIsNative,
                orderExpirationDelay: this.orderConfig.orderExpirationDelay.toString(),
                resolverCancellationConfig: this.resolverCancellationConfig.toJSON(),
                source: this.orderConfig.source,
                allowMultipleFills: this.multipleFillsAllowed,
                // use only last bits because high ones set from source
                salt: this.salt.toString()
            }
        };
    }
    getOrderAccount(
    /**
     * Src escrow factory program id
     */
    programId) {
        return new index_js_1.SvmSrcEscrowFactory(programId).getOrderAccount(this.getOrderHashBuffer());
    }
    /**
     * Returns escrow address - owner of ATA where funds stored after fill
     *
     * @see getSrcEscrowATA to get ATA where funds stored
     */
    getSrcEscrowAddress(
    /**
     * Src escrow factory program id
     */
    programId, 
    /**
     * Address who fill order and create corresponding escrow
     */
    taker, 
    /**
     * HashLock corresponding to the fill amount secret
     * Can be omitted  for orders where `multipleFillsAllowed` is false
     */
    hashLock = this.hashLock, fillAmount = this.makingAmount) {
        return new index_js_1.SvmSrcEscrowFactory(programId).getEscrowAddress({
            orderHash: this.getOrderHashBuffer(),
            hashLock,
            taker,
            amount: fillAmount
        });
    }
    /**
     * Account where funds stored after fill
     */
    getSrcEscrowATA(params) {
        const escrowAddress = this.getSrcEscrowAddress(params.programId, params.taker, params.hashLock, params.fillAmount);
        return (0, index_js_5.getAta)(escrowAddress, this.makerAsset, params.tokenProgramId);
    }
    /**
     * @returns order has in base58 encoding
     */
    getOrderHash(_srcChainId) {
        return anchor_1.utils.bytes.bs58.encode(this.getOrderHashBuffer());
    }
    getOrderHashBuffer() {
        return SvmCrossChainOrder.getOrderHashBuffer(this);
    }
    getCalculator() {
        const details = this.details.auction;
        return new fusion_sdk_1.AuctionCalculator(details.startTime, details.duration, details.initialRateBump, details.points, 0n // no taker fee
        );
    }
}
exports.SvmCrossChainOrder = SvmCrossChainOrder;
//# sourceMappingURL=svm-cross-chain-order.js.map