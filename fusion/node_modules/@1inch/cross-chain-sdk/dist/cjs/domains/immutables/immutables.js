"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Immutables = void 0;
const ethers_1 = require("ethers");
const byte_utils_1 = require("@1inch/byte-utils");
const assert_1 = __importDefault(require("assert"));
const index_js_1 = require("../hash-lock/index.js");
const index_js_2 = require("../time-locks/index.js");
const index_js_3 = require("../../domains/addresses/index.js");
const bytes_js_1 = require("../../utils/bytes.js");
/**
 * Contains escrow params for both source and destination chains
 * Determinate addresses of escrow contracts
 */
class Immutables {
    orderHash;
    hashLock;
    maker;
    taker;
    token;
    amount;
    safetyDeposit;
    timeLocks;
    static Web3Type = `tuple(${[
        'bytes32 orderHash',
        'bytes32 hashlock',
        'address maker',
        'address taker',
        'address token',
        'uint256 amount',
        'uint256 safetyDeposit',
        'uint256 timelocks'
    ]})`;
    constructor(orderHash, hashLock, maker, 
    /**
     * Address who can withdraw funds, also to this address funds will be transferred in case of public withdrawal
     */
    taker, token, amount, safetyDeposit, timeLocks) {
        this.orderHash = orderHash;
        this.hashLock = hashLock;
        this.maker = maker;
        this.taker = taker;
        this.token = token;
        this.amount = amount;
        this.safetyDeposit = safetyDeposit;
        this.timeLocks = timeLocks;
        this.token = this.token.zeroAsNative();
    }
    static new(params) {
        return new Immutables(params.orderHash, params.hashLock, params.maker, params.taker, params.token, params.amount, params.safetyDeposit, params.timeLocks);
    }
    /**
     * Create instance from encoded bytes
     * @param bytes 0x prefixed hex string
     */
    static fromABIEncoded(bytes) {
        (0, assert_1.default)((0, byte_utils_1.isHexBytes)(bytes));
        const res = ethers_1.AbiCoder.defaultAbiCoder().decode([Immutables.Web3Type], bytes);
        const data = res.at(0);
        return Immutables.fromJSON(data);
    }
    static fromJSON(data) {
        const isSolanaAddress = data.maker.length === 66;
        const isEvmAddress = data.maker.length === 42;
        (0, assert_1.default)(isSolanaAddress || isEvmAddress, 'invalid addresses length');
        if (isSolanaAddress) {
            (0, assert_1.default)(data.taker.length === 66, 'invalid solana taker address len');
            (0, assert_1.default)(data.token.length === 66, 'invalid solana token address len');
        }
        if (isEvmAddress) {
            (0, assert_1.default)(data.taker.length === 42, 'invalid solana taker address len');
            (0, assert_1.default)(data.token.length === 42, 'invalid solana token address len');
        }
        const TypedAddress = isSolanaAddress ? index_js_3.SolanaAddress : index_js_3.EvmAddress;
        return new Immutables((0, bytes_js_1.bufferFromHex)(data.orderHash), index_js_1.HashLock.fromString(data.hashlock), TypedAddress.fromBuffer((0, bytes_js_1.bufferFromHex)(data.maker)), TypedAddress.fromBuffer((0, bytes_js_1.bufferFromHex)(data.taker)), TypedAddress.fromBuffer((0, bytes_js_1.bufferFromHex)(data.token)), BigInt(data.amount), BigInt(data.safetyDeposit), index_js_2.TimeLocks.fromBigInt(BigInt(data.timelocks)));
    }
    toJSON() {
        return this.build();
    }
    withComplement(dstComplement) {
        return Immutables.new({ ...this, ...dstComplement });
    }
    withDeployedAt(time) {
        return Immutables.new({
            ...this,
            timeLocks: index_js_2.TimeLocks.fromBigInt(this.timeLocks.build()).setDeployedAt(time)
        });
    }
    withTaker(taker) {
        return Immutables.new({ ...this, taker });
    }
    withHashLock(hashLock) {
        return Immutables.new({ ...this, hashLock });
    }
    withAmount(amount) {
        return Immutables.new({ ...this, amount });
    }
    /**
     * Return keccak256 hash of instance
     */
    hash() {
        return (0, ethers_1.keccak256)(this.toABIEncoded());
    }
    build() {
        const token = this.token.nativeAsZero();
        return {
            orderHash: (0, byte_utils_1.add0x)(this.orderHash.toString('hex')),
            hashlock: this.hashLock.toString(),
            maker: this.maker.toHex(),
            taker: this.taker.toHex(),
            token: token.toHex(),
            amount: this.amount.toString(),
            safetyDeposit: this.safetyDeposit.toString(),
            timelocks: this.timeLocks.build().toString()
        };
    }
    /**
     * Encode instance as bytes
     */
    toABIEncoded() {
        return ethers_1.AbiCoder.defaultAbiCoder().encode([Immutables.Web3Type], [this.build()]);
    }
}
exports.Immutables = Immutables;
//# sourceMappingURL=immutables.js.map