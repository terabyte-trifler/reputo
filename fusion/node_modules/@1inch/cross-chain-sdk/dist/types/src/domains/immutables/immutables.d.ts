import { DstImmutablesComplement } from './dst-immutables-complement.js';
import { HashLock } from '../hash-lock/index.js';
import { TimeLocks } from '../time-locks/index.js';
import { AddressLike, EvmAddress } from '../../domains/addresses/index.js';
/**
 * Contract representation of class
 */
export type ImmutablesData = {
    /**
     * hex encoded with 0x prefix
     */
    orderHash: string;
    hashlock: string;
    maker: string;
    taker: string;
    token: string;
    amount: string;
    safetyDeposit: string;
    timelocks: string;
};
/**
 * Contains escrow params for both source and destination chains
 * Determinate addresses of escrow contracts
 */
export declare class Immutables<A extends AddressLike = AddressLike> {
    readonly orderHash: Buffer;
    readonly hashLock: HashLock;
    readonly maker: A;
    /**
     * Address who can withdraw funds, also to this address funds will be transferred in case of public withdrawal
     */
    readonly taker: A;
    readonly token: A;
    readonly amount: bigint;
    readonly safetyDeposit: bigint;
    readonly timeLocks: TimeLocks;
    static readonly Web3Type: string;
    private constructor();
    static new<A extends AddressLike>(params: {
        orderHash: Buffer;
        hashLock: HashLock;
        maker: A;
        taker: A;
        token: A;
        amount: bigint;
        safetyDeposit: bigint;
        timeLocks: TimeLocks;
    }): Immutables<A>;
    /**
     * Create instance from encoded bytes
     * @param bytes 0x prefixed hex string
     */
    static fromABIEncoded(bytes: string): Immutables<EvmAddress>;
    static fromJSON<T extends AddressLike = AddressLike>(data: ImmutablesData): Immutables<T>;
    toJSON(): ImmutablesData;
    withComplement<D extends AddressLike>(dstComplement: DstImmutablesComplement<D>): Immutables<D>;
    withDeployedAt(time: bigint): Immutables<A>;
    withTaker(taker: A): Immutables<A>;
    withHashLock(hashLock: HashLock): Immutables<A>;
    withAmount(amount: bigint): Immutables<A>;
    /**
     * Return keccak256 hash of instance
     */
    hash(): string;
    build(): ImmutablesData;
    /**
     * Encode instance as bytes
     */
    toABIEncoded(): string;
}
