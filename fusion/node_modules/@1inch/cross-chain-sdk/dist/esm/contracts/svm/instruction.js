import bs58 from 'bs58';
import { add0x } from '@1inch/byte-utils';
import { Buffer } from 'buffer';
import { SolanaAddress } from '../../domains/addresses/index.js';
export class Instruction {
    programId;
    accounts;
    data;
    constructor(
    /**
     * Program Id to execute
     */
    programId, accounts, 
    /**
     * Program input
     */
    data) {
        this.programId = programId;
        this.accounts = accounts;
        this.data = data;
    }
    static fromNode(msg) {
        return msg.instructions.map((ix) => {
            return new Instruction(new SolanaAddress(ix.programId), ix.accounts.map((pubkey) => {
                const account = msg.accountKeys.find((x) => x.pubkey === pubkey);
                if (!account) {
                    throw new Error('account not found');
                }
                return {
                    isWritable: account.writable,
                    isSigner: account.signer,
                    pubkey: new SolanaAddress(account.pubkey)
                };
            }), Buffer.from(bs58.decode(ix.data)));
        });
    }
    toJSON() {
        return {
            accounts: this.accounts,
            data: add0x(this.data.toString('hex')),
            programId: this.programId
        };
    }
}
//# sourceMappingURL=instruction.js.map