import { isAddress } from 'ethers';
import { Address } from '@1inch/fusion-sdk';
import { AddressComplement } from './address-complement.js';
import { isBigintString } from '../../utils/numbers/is-bigint-string.js';
import { bufferFromHex } from '../../utils/bytes.js';
export class EvmAddress {
    inner;
    static ZERO = new EvmAddress(Address.ZERO_ADDRESS);
    static NATIVE = new EvmAddress(Address.NATIVE_CURRENCY);
    constructor(inner) {
        this.inner = inner;
    }
    static fromBigInt(val) {
        return new EvmAddress(Address.fromBigInt(val));
    }
    static fromString(address) {
        return new EvmAddress(new Address(address));
    }
    static fromBuffer(address) {
        const hex = '0x' +
            address
                .toString('hex')
                .substring(address.length * 2 - 40, address.length * 2);
        return new EvmAddress(new Address(hex));
    }
    static fromUnknown(address) {
        if (typeof address === 'string') {
            if (isAddress(address)) {
                return EvmAddress.fromString(address);
            }
            if (isBigintString(address)) {
                return EvmAddress.fromBigInt(BigInt(address));
            }
        }
        if (typeof address == 'bigint') {
            return EvmAddress.fromBigInt(address);
        }
        throw new Error(`Unknown address: ${address}`);
    }
    /**
     * @see zeroAsNative
     * @returns same address if current address is non native and zero address otherwise
     */
    nativeAsZero() {
        // because on contract side native address represent as zero address
        if (this.isNative()) {
            return EvmAddress.ZERO;
        }
        return this;
    }
    /**
     * @see nativeAsZero
     * @returns same address if current address is non zero and 0xee..ee otherwise
     */
    zeroAsNative() {
        // because on contract side native address represent as zero address
        if (this.isZero()) {
            return EvmAddress.NATIVE;
        }
        return this;
    }
    toBuffer() {
        return bufferFromHex(this.toString());
    }
    toHex() {
        return this.inner.toString();
    }
    equal(other) {
        return this.inner.toString() === other.toString();
    }
    isNative() {
        return this.inner.isNative();
    }
    isZero() {
        return this.inner.isZero();
    }
    toBigint() {
        return BigInt(this.inner.toString());
    }
    toString() {
        return this.inner.toString();
    }
    toJSON() {
        return this.inner.toString();
    }
    splitToParts() {
        return [AddressComplement.ZERO, this];
    }
}
//# sourceMappingURL=evm-address.js.map